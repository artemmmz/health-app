version: '3.9'

services:
  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    user: root
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:9092
      - ${KAFKA_LOCALHOST_PORT}:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 100001200
    restart: always
    volumes:
      - ./kafka-data:/var/lib/kafka/data

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    volumes:
      - ./kui-data/config.yml:/etc/kafkaui/dynamic_config.yaml

  zookeeper:
    image: zookeeper:${ZK_VERSION}
    ports:
      - ${ZK_PORT}:2181
    restart: always
    volumes:
      - ./zk-data:/var/lib/zookeeper/data \
      - ./zk-txn-logs:/var/lib/zookeeper/log \

  kafka-setup:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on:
      - kafka
    restart: no
    command: |
      bash -c 'kafka-topics --create --if-not-exists --topic sessions --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092'
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  postgres:
    image: postgres:${PG_VERSION}
    restart: always
    environment:
      POSTGRES_DATABASE: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgres

      MS_ACCOUNTS_USER: accounts
      MS_ACCOUNTS_DB: accounts
      MS_ACCOUNTS_PASSWORD: postgres
    volumes:
      - ./postgres-data:/var/lib/postgresql
      - ./docker/create-postgres-databases.sh:/docker-entrypoint-initdb.d/create-postgres-databases.sh
    ports:
      - ${PG_PORT}:5432

  redis:
    image: redis:${REDIS_VERSION}
    environment:
      - REDIS_PASSWORD=redis
      - REDIS_USER=redis
      - REDIS_USER_PASSWORD=redis
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
